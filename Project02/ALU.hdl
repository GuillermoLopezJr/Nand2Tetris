// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	Mux16(a=x, b=false, sel=zx, out=xpz); //x possibly zeroed
	
	Not16(in=xpz, out=notxpz);
	Mux16(a=xpz, b=notxpz, sel=nx, out= xpn); //x possibly negated
	
	Mux16(a=y, b=false, sel=zy, out=ypz); //y possibly zeroed
	
	Not16(in=ypz, out=notypz);
	Mux16(a=ypz, b=notypz, sel=ny, out=ypn); //y possibly negated
	
	Add16(a=xpn, b=ypn, out=xplusy); //regular addition
	And16(a=xpn, b=ypn, out=bitand); //bit wise addition
	Mux16(a=bitand, b=xplusy, sel=f, out=addVal); //decide on addition
	
	Not16(in=addVal, out=negRes);	
	Mux16(a=addVal, b=negRes, sel=no, out=out, out[15]=ng, out[0..7]=fstHalf, out[8..15]=secHalf);

	Or8Way(in=fstHalf, out=notFstHalf); //true if one found in first half
	Or8Way(in=secHalf, out=notSecHalf); //true if one found in second half
	
	Not(in=notFstHalf, out=notA); //if all zero then => 1
	Not(in=notSecHalf, out=notB); //if all zero the => 1
	And(a=notA, b=notB, out=zr); //set zero bit
}